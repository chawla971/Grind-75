# Define a simple TreeNode class
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        cur = root
        while cur:
            if p.val > cur.val and q.val > cur.val:
                cur = cur.right
            elif p.val < cur.val and q.val < cur.val:
                cur = cur.left
            else:
                return cur


# ----------------------------
# Test the function in VS Code
# ----------------------------
if __name__ == "__main__":
    # Build the BST manually
    root = TreeNode(6)
    root.left = TreeNode(2)
    root.right = TreeNode(8)
    root.left.left = TreeNode(0)
    root.left.right = TreeNode(4)
    root.right.left = TreeNode(7)
    root.right.right = TreeNode(9)
    root.left.right.left = TreeNode(3)
    root.left.right.right = TreeNode(5)

    sol = Solution()

    # Test 1
    p = root.left          # 2
    q = root.right         # 8
    print(f"LCA of {p.val} and {q.val} ->", sol.lowestCommonAncestor(root, p, q).val)  # 6

    # Test 2
    p = root.left          # 2
    q = root.left.right    # 4
    print(f"LCA of {p.val} and {q.val} ->", sol.lowestCommonAncestor(root, p, q).val)  # 2

    # Test 3
    p = root.left.right.left   # 3
    q = root.left.right.right  # 5
    print(f"LCA of {p.val} and {q.val} ->", sol.lowestCommonAncestor(root, p, q).val)  # 4
