"""
Problem: Merge Two Sorted Lists (LeetCode #21)
----------------------------------------------
Merge two sorted linked lists and return it as a sorted list.
The list should be made by splicing together the nodes of the first two lists.
"""

from typing import Optional


# Definition for singly-linked list (needed for local testing)
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __repr__(self):
        return f"{self.val} -> {self.next}"


class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy

        while list1 and list2:
            if list1.val <= list2.val:
                tail.next = list1
                list1 = list1.next
            else:
                tail.next = list2
                list2 = list2.next
            tail = tail.next

        # Attach any remaining nodes
        tail.next = list1 if list1 else list2
        return dummy.next


# ğŸ§ª Helper Functions for Testing
def build_linked_list(values):
    """Converts a list of integers into a linked list and returns the head node."""
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for val in values[1:]:
        current.next = ListNode(val)
        current = current.next
    return head


def print_linked_list(head):
    """Prints the linked list in readable form."""
    elements = []
    while head:
        elements.append(str(head.val))
        head = head.next
    print(" -> ".join(elements))


# ğŸ§  Main function for local testing
def main():
    solver = Solution()

    # Example inputs
    list1 = build_linked_list([1, 2, 4])
    list2 = build_linked_list([1, 3, 4])

    print("List 1:")
    print_linked_list(list1)

    print("\nList 2:")
    print_linked_list(list2)

    # Merge and print result
    merged = solver.mergeTwoLists(list1, list2)
    print("\nMerged List:")
    print_linked_list(merged)


if __name__ == "__main__":
    main()
