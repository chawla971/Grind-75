"""
Problem: Invert Binary Tree (LeetCode #226)
-------------------------------------------
Given the root of a binary tree, invert the tree and return its root.
Inversion means swapping every left and right subtree recursively.
"""

from typing import Optional


# Definition for a binary tree node (needed for local testing)
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

    def __repr__(self):
        return f"{self.val}"


class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None

        # Swap left and right
        tmp = root.left
        root.left = root.right
        root.right = tmp

        # Recur on children
        self.invertTree(root.left)
        self.invertTree(root.right)

        return root


# ðŸ§ª Helper functions for local testing
def build_tree(values):
    """
    Builds a binary tree from a list (level-order).
    Example: [4,2,7,1,3,6,9]
    """
    if not values:
        return None

    nodes = [TreeNode(v) if v is not None else None for v in values]
    kid_index = 1
    for i, node in enumerate(nodes):
        if node:
            if kid_index < len(nodes):
                node.left = nodes[kid_index]
                kid_index += 1
            if kid_index < len(nodes):
                node.right = nodes[kid_index]
                kid_index += 1
    return nodes[0]


def print_tree(root):
    """Prints the tree in level order."""
    if not root:
        print("Empty tree")
        return

    from collections import deque
    queue = deque([root])
    result = []
    while queue:
        node = queue.popleft()
        if node:
            result.append(str(node.val))
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append("None")

    # Remove trailing "None" for cleaner output
    while result and result[-1] == "None":
        result.pop()

    print(" -> ".join(result))


# ðŸ§  Main function for local testing
def main():
    solver = Solution()

    # Example tree: [4,2,7,1,3,6,9]
    root = build_tree([4, 2, 7, 1, 3, 6, 9])
    print("Original Tree:")
    print_tree(root)

    inverted = solver.invertTree(root)
    print("\nInverted Tree:")
    print_tree(inverted)


if __name__ == "__main__":
    main()
